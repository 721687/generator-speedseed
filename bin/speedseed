#!/usr/bin/env node

const path = require('path')

const arg = (process.argv[2]) ? process.argv[2] : ''

const gulp = path.normalize('node_modules/.bin/gulp')

const input = (str) => {
    const spawn = require('child_process').spawn

    const command = str.split(' ')

    spawn(command[0], command.slice(1), {
        shell: true,
        stdio: 'inherit'
    })
}

const options = {
    i() {
        this.install()
    },

    install() {
        (process.argv[3] === '-g')
            ? input('npm i bower -g && npm i yo -g')
            : input('npm i && bower i')
    },

    update() {
        input('npm i generator-speedseed -g && yo speedseed:postinstall && npm i && bower i')
    },

    start() {
        input('yo speedseed')
    },

    build() {
        const open = (process.argv[3] === 'open')

        input(`${gulp} build --open=${open}`)
    },

    dist() {
        const server = (process.argv[3] === 'server')

        input(`${gulp} build --dist=true --server=${server}`)
    },

    serve() {
        const dist = (process.argv[3] === 'dist')

        input(`${gulp} webserver --dist=${dist}`)
    },

    component() {
        input('yo speedseed:component')
    },

    indent() {
        input(`${gulp} indent`)
    },

    reports() {
        input(`${gulp} reports`)
    },

    spec() {
        input(`${gulp} test`)
    },

    clean() {
        input(`rmdir ${process.argv[3]} /s /q`)
    },

    server() {
        input('node .core\\server')
    },

    typings() {
        input('typings install')
    },

    help() {
        console.log(`
    speedseed install [-g]
    speedseed update

    speedseed start
    speedseed build [open]
    speedseed dist [server]
    speedseed serve [dist]

    speedseed component

    speedseed indent
    speedseed reports
    speedseed spec

    speedseed clean [<dir>]
    speedseed server
    speedseed typings
    speedseed help
        `)
    },

    default() {
        console.log(`Command ${arg} not found
Try with:`)

        this.help()
    }
};

(options[arg])
    ? options[arg]()
    : options.default()